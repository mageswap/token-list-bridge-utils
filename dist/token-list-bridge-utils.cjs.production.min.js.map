{"version":3,"file":"token-list-bridge-utils.cjs.production.min.js","sources":["../src/constants/chainId.ts","../src/utils.ts","../src/arbitrum/set_rpc.ts","../src/arbitrum/instantiate_bridge.ts","../src/arbitrum/gateway.ts","../src/providers/ArbitrumMappingProvider.ts","../src/providers/OptimismMappingProvider.ts","../src/providers/PolygonMappingProvider.ts","../src/providers/BnbMappingProvider.ts","../src/abis/erc20.ts","../src/providers/index.ts","../src/verify.ts","../src/index.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  RINKEBY = 4,\n\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_RINKEBY = 421611,\n\n  OPTIMISM = 10,\n  OPTIMISTIC_KOVAN = 69,\n\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n\n  CELO = 42220,\n  BNB = 56,\n}\n","import { TokenInfo, TokenList } from '@mageswap/token-lists'\nimport { readFileSync, existsSync } from 'fs'\nimport axios from 'axios'\nimport { ChainId } from './constants/chainId'\nimport { Contract } from 'web3-eth-contract'\n\nexport type TokenListOrFetchableTokenList = TokenList | string\n\nexport function compareTokenInfos(t1: TokenInfo, t2: TokenInfo) {\n  if (t1.chainId === t2.chainId) {\n    return t1.symbol.toLowerCase() < t2.symbol.toLowerCase() ? -1 : 1\n  }\n  return t1.chainId < t2.chainId ? -1 : 1\n}\n\n// ref: https://github.com/OffchainLabs/arb-token-lists/blob/master/src/lib/utils.ts\n\nexport async function getTokenList(\n  l1TokenListOrPathOrUrl: TokenListOrFetchableTokenList\n): Promise<TokenList> {\n  if (typeof l1TokenListOrPathOrUrl === 'string') {\n    return getTokenListObj(l1TokenListOrPathOrUrl)\n  } else {\n    return l1TokenListOrPathOrUrl\n  }\n}\n\nexport const getTokenListObjFromUrl = async (url: string) => {\n  return (await axios.get(url)).data as TokenList\n}\n\nexport const getTokenListObjFromLocalPath = async (path: string) => {\n  return JSON.parse(readFileSync(path).toString()) as TokenList\n}\n\nexport const getTokenListObj = async (pathOrUrl: string) => {\n  const tokenList: TokenList = await (async (pathOrUrl: string) => {\n    const localFileExists = existsSync(pathOrUrl)\n    const looksLikeUrl = isValidHttpUrl(pathOrUrl)\n    if (localFileExists) {\n      return getTokenListObjFromLocalPath(pathOrUrl)\n    } else if (looksLikeUrl) {\n      return await getTokenListObjFromUrl(pathOrUrl)\n    } else {\n      throw new Error('Could not find token list')\n    }\n  })(pathOrUrl)\n  isTokenList(tokenList)\n  return tokenList\n}\n\n// https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url\n\nfunction isValidHttpUrl(urlString: string) {\n  let url\n\n  try {\n    url = new URL(urlString)\n  } catch (_) {\n    return false\n  }\n\n  return url.protocol === 'http:' || url.protocol === 'https:'\n}\n\n// typeguard:\nexport const isTokenList = (obj: any) => {\n  const expectedListKeys = ['name', 'timestamp', 'version', 'tokens']\n  const actualListKeys = new Set(Object.keys(obj))\n  if (!expectedListKeys.every((key) => actualListKeys.has(key))) {\n    throw new Error('tokenlist typeguard error: required list key not included')\n  }\n  const { version, tokens } = obj\n  if (\n    !['major', 'minor', 'patch'].every((key) => {\n      return typeof version[key] === 'number'\n    })\n  ) {\n    throw new Error('tokenlist typeguard error: invalid version')\n  }\n  if (\n    !tokens.every((token: any) => {\n      const tokenKeys = new Set(Object.keys(token))\n      return ['chainId', 'address', 'name', 'decimals', 'symbol'].every(\n        (key) => {\n          return tokenKeys.has(key)\n        }\n      )\n    })\n  ) {\n    throw new Error('tokenlist typeguard error: token missing required key')\n  }\n}\n\nexport function getRpcUrl(chainId: ChainId): string {\n  switch (chainId) {\n    case ChainId.MAINNET:\n      return 'https://cloudflare-eth.com/'\n    case ChainId.OPTIMISM:\n      return 'https://rpc.ankr.com/optimism' // seems to have higher rate limit than https://mainnet.optimism.io/\n    case ChainId.OPTIMISTIC_KOVAN:\n      return 'https://kovan.optimism.io'\n    case ChainId.ARBITRUM_ONE:\n      return 'https://arb1.arbitrum.io/rpc'\n    case ChainId.ARBITRUM_RINKEBY:\n      return 'https://rinkeby.arbitrum.io/rpc'\n    case ChainId.POLYGON:\n      return 'https://polygon-rpc.com/'\n    case ChainId.POLYGON_MUMBAI:\n      return 'https://rpc-endpoints.superfluid.dev/mumbai'\n    case ChainId.BNB:\n      return 'https://bsc-dataseed1.binance.org'\n    default:\n  }\n  throw new Error('Unsupported ChainId')\n}\n\nexport async function getTokenSymbolFromContract(tokenContract: Contract) {\n  const symbol = await Promise.all([tokenContract.methods.symbol().call()])\n  return symbol\n}\n","import { config } from 'dotenv'\nimport { ChainId } from '../constants/chainId'\nimport { getRpcUrl } from '../utils'\n\n// MAINNET_RPC value is required for arb-sdk. fall back to https://cloudflare-eth.com/ if MAINNET_RPC not provided in an .env file\nconfig()\nprocess.env.MAINNET_RPC ??= getRpcUrl(ChainId.MAINNET)\n","import './set_rpc.ts'\nimport { providers } from 'ethers'\n\nconst networkID = 42161\n\n// ref: https://github.com/OffchainLabs/arb-token-lists/blob/master/src/lib/instantiate_bridge.ts\nexport const getNetworkConfig = async () => {\n  const { getL1Network, getL2Network, MultiCaller } = await import(\n    '@arbitrum/sdk'\n  )\n  const l2Network = await getL2Network(networkID)\n  const l1Network = await getL1Network(l2Network.partnerChainID)\n\n  const arbProvider = new providers.JsonRpcProvider(l2Network.rpcURL)\n  const ethProvider = new providers.JsonRpcProvider(l1Network.rpcURL)\n\n  const l1MultiCaller = await MultiCaller.fromProvider(ethProvider)\n  const l2MultiCaller = await MultiCaller.fromProvider(arbProvider)\n\n  return {\n    l1: {\n      network: l1Network,\n      provider: ethProvider,\n      multiCaller: l1MultiCaller,\n    },\n    l2: {\n      network: l2Network,\n      provider: arbProvider,\n      multiCaller: l2MultiCaller,\n    },\n  }\n}\n","import { MultiCaller } from '@arbitrum/sdk'\nimport { L1GatewayRouter__factory } from '@arbitrum/sdk/dist/lib/abi/factories/L1GatewayRouter__factory'\n\n// ref: https://github.com/OffchainLabs/arb-token-lists/blob/0165d84d51746005aa2da0328c5ca2ac651480fb/src/lib/utils.ts#L42\n\nexport const getL2TokenAddressesFromL1 = async (\n  l1TokenAddresses: string[],\n  multiCaller: MultiCaller,\n  l1GatewayRouterAddress: string\n) => {\n  const iFace = L1GatewayRouter__factory.createInterface()\n\n  return await multiCaller.multiCall(\n    l1TokenAddresses.map((addr) => ({\n      encoder: () =>\n        iFace.encodeFunctionData('calculateL2TokenAddress', [addr]),\n      decoder: (returnData: string) =>\n        iFace.decodeFunctionResult(\n          'calculateL2TokenAddress',\n          returnData\n        )[0] as string,\n      targetAddr: l1GatewayRouterAddress,\n    }))\n  )\n}\n","import { MappingProvider } from './MappingProvider'\nimport { getNetworkConfig } from '../arbitrum/instantiate_bridge'\nimport { getL2TokenAddressesFromL1 } from '../arbitrum/gateway'\nimport { TokenList } from '@mageswap/token-lists'\nimport { GenericMappedTokenData } from '../constants/types'\n\n/**\n * This provider provides the l1->l2(Arbitrum) address mappings using the arbitrum SDK.\n */\nexport class ArbitrumMappingProvider implements MappingProvider {\n  l1TokenList: TokenList\n\n  constructor(l1TokenList: TokenList) {\n    this.l1TokenList = l1TokenList\n  }\n\n  async provide(): Promise<GenericMappedTokenData> {\n    let tokens: { [key: string]: string | undefined } = {}\n\n    const { l1, l2 } = await getNetworkConfig()\n\n    let tokenAddresses = this.l1TokenList.tokens.map((token) =>\n      token.address.toLowerCase()\n    )\n\n    const l2AddressesFromL1 = await getL2TokenAddressesFromL1(\n      tokenAddresses,\n      l1.multiCaller,\n      l2.network.tokenBridge.l1GatewayRouter\n    )\n\n    tokens = tokenAddresses.reduce(\n      (obj, key, index) => ({ ...obj, [key]: l2AddressesFromL1[index] }),\n      {}\n    )\n\n    return tokens\n  }\n}\n","import { MappingProvider } from './MappingProvider'\nimport { ChainId } from '../constants/chainId'\nimport { getTokenList } from '../utils'\nimport { GenericMappedTokenData } from '../constants/types'\n\nconst optimismTokenListURL =\n  'https://raw.githubusercontent.com/' +\n  'ethereum-optimism/ethereum-optimism.github.io/2138386277e4156d159615d1840882cecc398437/optimism.tokenlist.json'\n\n/**\n * The Optimism L2 mapping (linked above) is manually maintained by the Optimism team.\n *\n * This provider provides the l1->l2(Optimism) token mappings.\n */\nexport class OptimismMappingProvider implements MappingProvider {\n  async provide(): Promise<GenericMappedTokenData> {\n    const tokens: { [key: string]: string | undefined } = {}\n\n    let optimismTokens = await getTokenList(optimismTokenListURL)\n\n    for (const token of optimismTokens.tokens) {\n      if (token.chainId === ChainId.MAINNET) {\n        tokens[token.address.toLowerCase()] =\n          token?.extensions?.bridgeInfo![ChainId.OPTIMISM].tokenAddress\n      }\n    }\n\n    return tokens\n  }\n}\n","import axios from 'axios'\nimport { MappingProvider } from './MappingProvider'\nimport { PolygonMappedTokenData } from '../constants/types'\n\n// called from https://mapper.polygon.technology\nconst url = 'https://open-api.polygon.technology/api/v1/info/all-mappings'\nconst access_token = '504afd90-3228-4df9-9d88-9b4d70646101'\n\n/**\n * The Polygon team manually maintains the mapping via user submissions at\n * https://mapper.polygon.technology.\n *\n * This provider provides the l1->l2(Polygon) token mappings.\n */\nexport class PolygonMappingProvider implements MappingProvider {\n  async provide(): Promise<PolygonMappedTokenData> {\n    const response = await axios.get(url, {\n      headers: { 'x-access-token': access_token },\n    })\n    const tokens: PolygonMappedTokenData = {}\n\n    for (const token of response.data) {\n      if (token.isPos) {\n        tokens[token.rootToken.toLowerCase()] = token\n      }\n    }\n    return tokens\n  }\n}\n","import { MappingProvider } from './MappingProvider'\nimport { BnbMappedTokenData, GenericMappedTokenData } from '../constants/types'\nimport bnbmappings from '../local_mappings/bnb.json'\n\n// barring a better external source, we use a local source of mappings for bnb\nexport class BnbMappingProvider implements MappingProvider {\n  async provide(): Promise<BnbMappedTokenData> {\n    const tokens = bnbmappings as BnbMappedTokenData\n    return tokens\n  }\n}\n","import { AbiItem } from 'web3-utils'\n\nconst abi: AbiItem[] = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address',\n      },\n      {\n        name: '_value',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address',\n      },\n      {\n        name: '_to',\n        type: 'address',\n      },\n      {\n        name: '_value',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address',\n      },\n      {\n        name: '_value',\n        type: 'uint256',\n      },\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address',\n      },\n      {\n        name: '_spender',\n        type: 'address',\n      },\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n]\n\nexport default abi\n","import { ChainId } from '../constants/chainId'\nimport { Contract } from 'web3-eth-contract'\nimport { ArbitrumMappingProvider } from './ArbitrumMappingProvider'\nimport { OptimismMappingProvider } from './OptimismMappingProvider'\nimport { PolygonMappingProvider } from './PolygonMappingProvider'\nimport { BnbMappingProvider } from './BnbMappingProvider'\nimport { TokenInfo, TokenList } from '@mageswap/token-lists'\nimport { ethers } from 'ethers'\nimport {\n  compareTokenInfos,\n  getRpcUrl,\n  getTokenSymbolFromContract,\n} from '../utils'\nimport ERC20Abi from '../abis/erc20'\n// TODO: use ethers for contract calls (without performance reduction).\nimport Web3 from 'web3'\nimport {\n  GenericMappedTokenData,\n  PolygonMappedTokenData,\n  BnbMappedTokenData,\n  BnbMappedToken,\n} from '../constants/types'\n\nconst web3 = new Web3()\n\n// chains we support fetching mappings for (can be different than the l2ChainIds arg for buildList)\nconst SUPPORTED_L2_CHAINS = [\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.OPTIMISM,\n  ChainId.BNB,\n]\n\nexport async function buildList(\n  l2ChainIds: Array<ChainId>,\n  l1TokenList: TokenList\n): Promise<TokenList> {\n  const multiChainedTokens: TokenInfo[] = []\n  const chainIdToMappingsMap = await generateTokenMappings(\n    l2ChainIds,\n    l1TokenList\n  )\n  for (const l1Token of l1TokenList.tokens) {\n    if (l1Token.chainId === ChainId.MAINNET) {\n      const chainIdToChildTokenDetailsMap: {\n        [key: number]: {\n          childTokenValid: boolean\n          childTokenAddress: string | undefined\n          decimals?: number\n        }\n      } = {}\n      const l2MappingExtension = {\n        extensions: {\n          bridgeInfo: {},\n        },\n      }\n      // build out the extensions.bridgeInfo data containing mappings for each L2 chain\n      await Promise.all(\n        l2ChainIds.map(async (chainId) => {\n          chainIdToChildTokenDetailsMap[chainId] = await getChildTokenDetails(\n            l1Token,\n            chainId,\n            chainIdToMappingsMap\n          )\n          if (chainIdToChildTokenDetailsMap[chainId].childTokenValid) {\n            l2MappingExtension.extensions.bridgeInfo[chainId] = {\n              tokenAddress:\n                chainIdToChildTokenDetailsMap[chainId].childTokenAddress,\n            }\n          }\n        })\n      )\n\n      // build the TokenInfo objects with bridgeInfo extension\n      l2ChainIds.concat([ChainId.MAINNET]).forEach((chainId) => {\n        if (\n          chainId === ChainId.MAINNET ||\n          chainIdToChildTokenDetailsMap[chainId].childTokenValid\n        ) {\n          const tokenInfo: TokenInfo =\n            chainId === ChainId.MAINNET\n              ? ({\n                  ...l1Token,\n                  extensions:\n                    Object.keys(l2MappingExtension.extensions.bridgeInfo)\n                      .length > 0\n                      ? {\n                          bridgeInfo: l2MappingExtension.extensions.bridgeInfo,\n                        }\n                      : undefined,\n                } as unknown as TokenInfo)\n              : ({\n                  ...l1Token,\n                  decimals:\n                    chainIdToChildTokenDetailsMap[chainId].decimals ??\n                    l1Token.decimals,\n                  chainId: chainId,\n                  address:\n                    chainIdToChildTokenDetailsMap[chainId].childTokenAddress,\n                  extensions: {\n                    bridgeInfo: {\n                      [ChainId.MAINNET]: {\n                        tokenAddress: ethers.utils.getAddress(l1Token.address),\n                      },\n                    },\n                  },\n                } as unknown as TokenInfo)\n\n          multiChainedTokens.push(tokenInfo)\n        }\n      })\n    }\n  }\n\n  // build and return final chainified token list\n  const tokenList = {\n    name: `(ChainIds: ${l2ChainIds}) ${l1TokenList.name}`,\n    timestamp: new Date().toISOString(),\n    version: l1TokenList.version,\n    tokens: multiChainedTokens.sort(compareTokenInfos),\n  }\n\n  return tokenList\n}\n\n// using a symbol lookup contract call to check whether the token exists on the L2\nasync function hasExistingTokenContract(address: string, chainId: ChainId) {\n  web3.setProvider(getRpcUrl(chainId))\n  try {\n    const contract: Contract = new web3.eth.Contract(ERC20Abi, address)\n    await getTokenSymbolFromContract(contract)\n  } catch {\n    return false\n  }\n\n  return true\n}\n\nfunction getMappingProvider(chainId: ChainId, l1TokenList: TokenList) {\n  switch (chainId) {\n    case ChainId.ARBITRUM_ONE:\n      return new ArbitrumMappingProvider(l1TokenList)\n    case ChainId.OPTIMISM:\n      return new OptimismMappingProvider()\n    case ChainId.POLYGON:\n      return new PolygonMappingProvider()\n    case ChainId.BNB:\n      return new BnbMappingProvider()\n    default:\n      throw new Error(`Chain ${chainId} not supported for fetching mappings.`)\n  }\n}\n\nasync function generateTokenMappings(\n  chainIds: ChainId[],\n  l1TokenList: TokenList\n) {\n  const chainIdToMappingsMap: {\n    [key: number]:\n      | PolygonMappedTokenData\n      | GenericMappedTokenData\n      | BnbMappedTokenData\n  } = {}\n\n  for (const chainId of chainIds) {\n    if (SUPPORTED_L2_CHAINS.includes(chainId)) {\n      chainIdToMappingsMap[chainId] = await getMappingProvider(\n        chainId,\n        l1TokenList\n      ).provide()\n    }\n  }\n\n  return chainIdToMappingsMap\n}\n\n// handles both string and object cases for childToken (Polygon mappings return object)\nasync function getChildTokenDetails(\n  l1Token: TokenInfo,\n  chainId: ChainId,\n  chainIdToMappingsMap: {\n    [key: number]:\n      | PolygonMappedTokenData\n      | GenericMappedTokenData\n      | BnbMappedTokenData\n  }\n): Promise<{\n  childTokenValid: boolean\n  childTokenAddress: string | undefined\n  decimals?: number | undefined\n}> {\n  const existingMapping: undefined | string =\n    l1Token?.extensions?.bridgeInfo?.[chainId]?.tokenAddress\n  // use the externally fetched mappings if manual entry doesn't exist for the token/chain mapping\n  // and the given L2 chain is supported for fetching mappings\n  if (SUPPORTED_L2_CHAINS.includes(chainId) && existingMapping === undefined) {\n    const childToken =\n      chainIdToMappingsMap[chainId][l1Token.address.toLowerCase()]\n\n    const childTokenAddress = childToken\n      ? ethers.utils.getAddress(\n          typeof childToken === 'object' ? childToken.childToken : childToken\n        )\n      : undefined\n    const childTokenValid = Boolean(\n      childTokenAddress &&\n        (await hasExistingTokenContract(childTokenAddress, chainId))\n    )\n    const decimals =\n      childToken && chainId === ChainId.BNB\n        ? (childToken as BnbMappedToken).decimals\n        : undefined\n\n    return {\n      childTokenValid: childTokenValid,\n      childTokenAddress: childTokenAddress,\n      decimals: decimals,\n    }\n  }\n  return {\n    childTokenValid: !!existingMapping,\n    childTokenAddress: existingMapping,\n  }\n}\n","import { TokenList } from '@mageswap/token-lists'\n\n/**\n * Verifies that for each token with extensions.bridgeInfo defined, for every\n * chainId there exists a token with that chainId at the root-level of the\n * token list.\n *\n * @returns input TokenList if valid, throws otherwise\n */\nexport function verifyExtensions(tokenList: TokenList) {\n  for (const token of tokenList.tokens) {\n    if (!token.extensions?.bridgeInfo) continue\n\n    // if has extension, make sure that:\n    // 1/ other token has root-level entry\n    // 2/ other root entry has extension pointing to it\n    for (const destChainId of Object.keys(token.extensions.bridgeInfo)) {\n      const destTokens = tokenList.tokens.filter(\n        (t) =>\n          t.chainId === Number(destChainId) &&\n          t.address ===\n            // @ts-expect-error TokenList schema does not allow bridgeInfo objetcs yet\n            token.extensions.bridgeInfo[destChainId].tokenAddress\n      )\n\n      if (destTokens.length > 1) {\n        throw new Error(\n          `TokenList has duplicate root-level tokens for ${token.symbol} ${token.chainId}`\n        )\n      }\n\n      const destToken = destTokens[0]\n\n      if (!destToken) {\n        throw new Error(\n          `TokenList is missing root-level TokenInfo for ${token.symbol} ${token.chainId}`\n        )\n      }\n\n      // ensure destToken has an extension pointing back to this\n      const srcToken: { tokenAddress: string } | undefined =\n        // @ts-expect-error TokenList schema does not allow bridgeInfo objects yet\n        destToken.extensions?.bridgeInfo[token.chainId]\n\n      if (!srcToken) {\n        throw new Error(\n          `TokenList is missing root-level TokenInfo.extensions.bridgeInfo for ${token.symbol} ${token.chainId}`\n        )\n      }\n\n      if (srcToken.tokenAddress !== token.address) {\n        throw new Error(\n          `TokenList has invalid root-level TokenInfo.extensions.bridgeInfo for ${token.symbol} ${token.chainId}. Expected ${token.address} but got ${srcToken.tokenAddress}`\n        )\n      }\n    }\n  }\n\n  return tokenList\n}\n","import { TokenList } from '@mageswap/token-lists'\nimport { cloneDeep, groupBy, merge } from 'lodash'\nimport { ChainId } from './constants/chainId'\nimport { buildList } from './providers'\nimport {\n  compareTokenInfos,\n  getTokenList,\n  TokenListOrFetchableTokenList,\n} from './utils'\nimport { verifyExtensions } from './verify'\n\n/**\n * Adds bridgeInfo to the given token list for Optimism, Polygon and Arbitrum.\n * @param l1TokenListOrPathOrUrl\n * @returns TokenList with l2 bridgeInfo filled\n */\nexport async function chainify(\n  l1TokenListOrPathOrUrl: TokenListOrFetchableTokenList\n): Promise<TokenList> {\n  const l1TokenList = await getTokenList(l1TokenListOrPathOrUrl)\n  const l2Chains = [\n    ChainId.POLYGON,\n    ChainId.ARBITRUM_ONE,\n    ChainId.OPTIMISM,\n    ChainId.CELO,\n    ChainId.BNB,\n  ]\n\n  const chainified = await chainifyTokenList(l2Chains, l1TokenListOrPathOrUrl)\n  return mergeTokenLists(\n    l1TokenList, // providing l1 first to make sure duplicated tokens resolve to this list\n    chainified\n  )\n}\n\n/**\n * Given a network and a TokenList, returns the TokenList with `extensions` filled.\n * @param l2ChainIds layer 2 chainIds to operate on\n * @param l1TokenListOrPathOrUrl either an L1 TokenList object or a path/url to a TokenList\n * @returns L1 TokenList with `extensions` filled for the given network\n */\nexport async function chainifyTokenList(\n  l2ChainIds: Array<ChainId>,\n  l1TokenListOrPathOrUrl: TokenListOrFetchableTokenList\n): Promise<TokenList> {\n  try {\n    const l1TokenList = await getTokenList(l1TokenListOrPathOrUrl)\n    const tokenList = await buildList(l2ChainIds, l1TokenList)\n    return verifyExtensions(tokenList)\n  } catch (e) {\n    throw new Error(`An error occured: ${e}`)\n  }\n}\n\n/** Merges two token lists, resolving conflicts to primary list. */\nexport function mergeTokenLists(\n  primary: TokenList,\n  secondary: TokenList\n): TokenList {\n  primary = cloneDeep(primary)\n  secondary = cloneDeep(secondary)\n\n  const grouped = groupBy(\n    [...secondary.tokens, ...primary.tokens],\n    (t) => `${t.chainId}-${t.address.toLowerCase()}`\n  )\n\n  const merged = Object.values(grouped).map((group) => {\n    if (group.length === 1) {\n      return group[0]\n    }\n\n    const merged = merge(group[0], group[1])\n    if (merged.extensions?.bridgeInfo) {\n      // remove reference to self-chain from merge\n      delete merged.extensions.bridgeInfo[merged.chainId]\n    }\n    return merged\n  })\n\n  return cloneDeep({\n    ...primary,\n    tokens: merged.sort(compareTokenInfos),\n  })\n}\n"],"names":["ChainId","compareTokenInfos","t1","t2","chainId","symbol","toLowerCase","getTokenList","_x","_getTokenList","apply","this","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee5","l1TokenListOrPathOrUrl","wrap","_context5","prev","next","abrupt","getTokenListObj","stop","getTokenListObjFromUrl","_ref","_callee","url","_context","axios","get","sent","data","_x2","getTokenListObjFromLocalPath","_ref2","_callee2","path","_context2","JSON","parse","readFileSync","toString","_x3","_ref3","_callee4","pathOrUrl","tokenList","_context4","_ref4","_callee3","localFileExists","looksLikeUrl","_context3","existsSync","isValidHttpUrl","Error","_x5","isTokenList","_x4","urlString","URL","_","protocol","obj","actualListKeys","Set","Object","keys","every","key","has","version","tokens","token","tokenKeys","getRpcUrl","MAINNET","OPTIMISM","OPTIMISTIC_KOVAN","ARBITRUM_ONE","ARBITRUM_RINKEBY","POLYGON","POLYGON_MUMBAI","BNB","getTokenSymbolFromContract","_x6","_getTokenSymbolFromContract","_callee6","tokenContract","_context6","Promise","all","methods","call","config","_process$env","process","env","MAINNET_RPC","getNetworkConfig","_yield$import","getL1Network","getL2Network","MultiCaller","l2Network","l1Network","arbProvider","ethProvider","l1MultiCaller","resolve","then","_interopNamespace","require","partnerChainID","providers","JsonRpcProvider","rpcURL","fromProvider","l1","network","provider","multiCaller","l2","getL2TokenAddressesFromL1","l1TokenAddresses","l1GatewayRouterAddress","iFace","L1GatewayRouter__factory","createInterface","multiCall","map","addr","encoder","encodeFunctionData","decoder","returnData","decodeFunctionResult","targetAddr","ArbitrumMappingProvider","l1TokenList","prototype","provide","_provide","_yield$getNetworkConf","tokenAddresses","l2AddressesFromL1","address","tokenBridge","l1GatewayRouter","reduce","index","_extends2","_extends","OptimismMappingProvider","_iterator","_step","_token$extensions","_createForOfIteratorHelperLoose","done","value","extensions","bridgeInfo","tokenAddress","PolygonMappingProvider","headers","isPos","rootToken","BnbMappingProvider","bnbmappings","abi","constant","inputs","name","outputs","type","payable","stateMutability","anonymous","indexed","web3","Web3","SUPPORTED_L2_CHAINS","buildList","_buildList","l2ChainIds","multiChainedTokens","chainIdToMappingsMap","_loop","generateTokenMappings","l1Token","chainIdToChildTokenDetailsMap","l2MappingExtension","getChildTokenDetails","childTokenValid","childTokenAddress","_x10","concat","forEach","_chainIdToChildTokenD","_bridgeInfo","tokenInfo","length","undefined","decimals","ethers","utils","getAddress","push","delegateYield","timestamp","Date","toISOString","sort","hasExistingTokenContract","_hasExistingTokenContract","contract","setProvider","eth","Contract","ERC20Abi","t0","getMappingProvider","_generateTokenMappings","chainIds","_iterator2","_step2","includes","_x7","_x8","_x9","_getChildTokenDetails","_l1Token$extensions","_l1Token$extensions$b","_l1Token$extensions$b2","existingMapping","childToken","Boolean","verifyExtensions","_loop2","_destToken$extensions","destChainId","_Object$keys","_i","destTokens","filter","t","Number","destToken","srcToken","_chainify","l2Chains","CELO","chainifyTokenList","mergeTokenLists","_chainifyTokenList","primary","secondary","cloneDeep","grouped","groupBy","merged","values","group","_merged$extensions","merge","chainify"],"mappings":"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"}