{"version":3,"file":"token-list-bridge-utils.esm.js","sources":["../src/constants/chainId.ts","../src/utils.ts","../src/arbitrum/set_rpc.ts","../src/arbitrum/instantiate_bridge.ts","../src/arbitrum/gateway.ts","../src/providers/ArbitrumMappingProvider.ts","../src/providers/OptimismMappingProvider.ts","../src/providers/PolygonMappingProvider.ts","../src/providers/BnbMappingProvider.ts","../src/abis/erc20.ts","../src/providers/index.ts","../src/verify.ts","../src/index.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  RINKEBY = 4,\n\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_RINKEBY = 421611,\n\n  OPTIMISM = 10,\n  OPTIMISTIC_KOVAN = 69,\n\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n\n  CELO = 42220,\n  BNB = 56,\n}\n","import { TokenInfo, TokenList } from '@mageswap/token-lists'\nimport { readFileSync, existsSync } from 'fs'\nimport axios from 'axios'\nimport { ChainId } from './constants/chainId'\nimport { Contract } from 'web3-eth-contract'\n\nexport type TokenListOrFetchableTokenList = TokenList | string\n\nexport function compareTokenInfos(t1: TokenInfo, t2: TokenInfo) {\n  if (t1.chainId === t2.chainId) {\n    return t1.symbol.toLowerCase() < t2.symbol.toLowerCase() ? -1 : 1\n  }\n  return t1.chainId < t2.chainId ? -1 : 1\n}\n\n// ref: https://github.com/OffchainLabs/arb-token-lists/blob/master/src/lib/utils.ts\n\nexport async function getTokenList(\n  l1TokenListOrPathOrUrl: TokenListOrFetchableTokenList\n): Promise<TokenList> {\n  if (typeof l1TokenListOrPathOrUrl === 'string') {\n    return getTokenListObj(l1TokenListOrPathOrUrl)\n  } else {\n    return l1TokenListOrPathOrUrl\n  }\n}\n\nexport const getTokenListObjFromUrl = async (url: string) => {\n  return (await axios.get(url)).data as TokenList\n}\n\nexport const getTokenListObjFromLocalPath = async (path: string) => {\n  return JSON.parse(readFileSync(path).toString()) as TokenList\n}\n\nexport const getTokenListObj = async (pathOrUrl: string) => {\n  const tokenList: TokenList = await (async (pathOrUrl: string) => {\n    const localFileExists = existsSync(pathOrUrl)\n    const looksLikeUrl = isValidHttpUrl(pathOrUrl)\n    if (localFileExists) {\n      return getTokenListObjFromLocalPath(pathOrUrl)\n    } else if (looksLikeUrl) {\n      return await getTokenListObjFromUrl(pathOrUrl)\n    } else {\n      throw new Error('Could not find token list')\n    }\n  })(pathOrUrl)\n  isTokenList(tokenList)\n  return tokenList\n}\n\n// https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url\n\nfunction isValidHttpUrl(urlString: string) {\n  let url\n\n  try {\n    url = new URL(urlString)\n  } catch (_) {\n    return false\n  }\n\n  return url.protocol === 'http:' || url.protocol === 'https:'\n}\n\n// typeguard:\nexport const isTokenList = (obj: any) => {\n  const expectedListKeys = ['name', 'timestamp', 'version', 'tokens']\n  const actualListKeys = new Set(Object.keys(obj))\n  if (!expectedListKeys.every((key) => actualListKeys.has(key))) {\n    throw new Error('tokenlist typeguard error: required list key not included')\n  }\n  const { version, tokens } = obj\n  if (\n    !['major', 'minor', 'patch'].every((key) => {\n      return typeof version[key] === 'number'\n    })\n  ) {\n    throw new Error('tokenlist typeguard error: invalid version')\n  }\n  if (\n    !tokens.every((token: any) => {\n      const tokenKeys = new Set(Object.keys(token))\n      return ['chainId', 'address', 'name', 'decimals', 'symbol'].every(\n        (key) => {\n          return tokenKeys.has(key)\n        }\n      )\n    })\n  ) {\n    throw new Error('tokenlist typeguard error: token missing required key')\n  }\n}\n\nexport function getRpcUrl(chainId: ChainId): string {\n  switch (chainId) {\n    case ChainId.MAINNET:\n      return 'https://cloudflare-eth.com/'\n    case ChainId.OPTIMISM:\n      return 'https://rpc.ankr.com/optimism' // seems to have higher rate limit than https://mainnet.optimism.io/\n    case ChainId.OPTIMISTIC_KOVAN:\n      return 'https://kovan.optimism.io'\n    case ChainId.ARBITRUM_ONE:\n      return 'https://arb1.arbitrum.io/rpc'\n    case ChainId.ARBITRUM_RINKEBY:\n      return 'https://rinkeby.arbitrum.io/rpc'\n    case ChainId.POLYGON:\n      return 'https://polygon-rpc.com/'\n    case ChainId.POLYGON_MUMBAI:\n      return 'https://rpc-endpoints.superfluid.dev/mumbai'\n    case ChainId.BNB:\n      return 'https://bsc-dataseed1.binance.org'\n    default:\n  }\n  throw new Error('Unsupported ChainId')\n}\n\nexport async function getTokenSymbolFromContract(tokenContract: Contract) {\n  const symbol = await Promise.all([tokenContract.methods.symbol().call()])\n  return symbol\n}\n","import { config } from 'dotenv'\nimport { ChainId } from '../constants/chainId'\nimport { getRpcUrl } from '../utils'\n\n// MAINNET_RPC value is required for arb-sdk. fall back to https://cloudflare-eth.com/ if MAINNET_RPC not provided in an .env file\nconfig()\nprocess.env.MAINNET_RPC ??= getRpcUrl(ChainId.MAINNET)\n","import './set_rpc.ts'\nimport { providers } from 'ethers'\n\nconst networkID = 42161\n\n// ref: https://github.com/OffchainLabs/arb-token-lists/blob/master/src/lib/instantiate_bridge.ts\nexport const getNetworkConfig = async () => {\n  const { getL1Network, getL2Network, MultiCaller } = await import(\n    '@arbitrum/sdk'\n  )\n  const l2Network = await getL2Network(networkID)\n  const l1Network = await getL1Network(l2Network.partnerChainID)\n\n  const arbProvider = new providers.JsonRpcProvider(l2Network.rpcURL)\n  const ethProvider = new providers.JsonRpcProvider(l1Network.rpcURL)\n\n  const l1MultiCaller = await MultiCaller.fromProvider(ethProvider)\n  const l2MultiCaller = await MultiCaller.fromProvider(arbProvider)\n\n  return {\n    l1: {\n      network: l1Network,\n      provider: ethProvider,\n      multiCaller: l1MultiCaller,\n    },\n    l2: {\n      network: l2Network,\n      provider: arbProvider,\n      multiCaller: l2MultiCaller,\n    },\n  }\n}\n","import { MultiCaller } from '@arbitrum/sdk'\nimport { L1GatewayRouter__factory } from '@arbitrum/sdk/dist/lib/abi/factories/L1GatewayRouter__factory'\n\n// ref: https://github.com/OffchainLabs/arb-token-lists/blob/0165d84d51746005aa2da0328c5ca2ac651480fb/src/lib/utils.ts#L42\n\nexport const getL2TokenAddressesFromL1 = async (\n  l1TokenAddresses: string[],\n  multiCaller: MultiCaller,\n  l1GatewayRouterAddress: string\n) => {\n  const iFace = L1GatewayRouter__factory.createInterface()\n\n  return await multiCaller.multiCall(\n    l1TokenAddresses.map((addr) => ({\n      encoder: () =>\n        iFace.encodeFunctionData('calculateL2TokenAddress', [addr]),\n      decoder: (returnData: string) =>\n        iFace.decodeFunctionResult(\n          'calculateL2TokenAddress',\n          returnData\n        )[0] as string,\n      targetAddr: l1GatewayRouterAddress,\n    }))\n  )\n}\n","import { MappingProvider } from './MappingProvider'\nimport { getNetworkConfig } from '../arbitrum/instantiate_bridge'\nimport { getL2TokenAddressesFromL1 } from '../arbitrum/gateway'\nimport { TokenList } from '@mageswap/token-lists'\nimport { GenericMappedTokenData } from '../constants/types'\n\n/**\n * This provider provides the l1->l2(Arbitrum) address mappings using the arbitrum SDK.\n */\nexport class ArbitrumMappingProvider implements MappingProvider {\n  l1TokenList: TokenList\n\n  constructor(l1TokenList: TokenList) {\n    this.l1TokenList = l1TokenList\n  }\n\n  async provide(): Promise<GenericMappedTokenData> {\n    let tokens: { [key: string]: string | undefined } = {}\n\n    const { l1, l2 } = await getNetworkConfig()\n\n    let tokenAddresses = this.l1TokenList.tokens.map((token) =>\n      token.address.toLowerCase()\n    )\n\n    const l2AddressesFromL1 = await getL2TokenAddressesFromL1(\n      tokenAddresses,\n      l1.multiCaller,\n      l2.network.tokenBridge.l1GatewayRouter\n    )\n\n    tokens = tokenAddresses.reduce(\n      (obj, key, index) => ({ ...obj, [key]: l2AddressesFromL1[index] }),\n      {}\n    )\n\n    return tokens\n  }\n}\n","import { MappingProvider } from './MappingProvider'\nimport { ChainId } from '../constants/chainId'\nimport { getTokenList } from '../utils'\nimport { GenericMappedTokenData } from '../constants/types'\n\nconst optimismTokenListURL =\n  'https://raw.githubusercontent.com/' +\n  'ethereum-optimism/ethereum-optimism.github.io/2138386277e4156d159615d1840882cecc398437/optimism.tokenlist.json'\n\n/**\n * The Optimism L2 mapping (linked above) is manually maintained by the Optimism team.\n *\n * This provider provides the l1->l2(Optimism) token mappings.\n */\nexport class OptimismMappingProvider implements MappingProvider {\n  async provide(): Promise<GenericMappedTokenData> {\n    const tokens: { [key: string]: string | undefined } = {}\n\n    let optimismTokens = await getTokenList(optimismTokenListURL)\n\n    for (const token of optimismTokens.tokens) {\n      if (token.chainId === ChainId.MAINNET) {\n        tokens[token.address.toLowerCase()] =\n          token?.extensions?.bridgeInfo![ChainId.OPTIMISM].tokenAddress\n      }\n    }\n\n    return tokens\n  }\n}\n","import axios from 'axios'\nimport { MappingProvider } from './MappingProvider'\nimport { PolygonMappedTokenData } from '../constants/types'\n\n// called from https://mapper.polygon.technology\nconst url = 'https://open-api.polygon.technology/api/v1/info/all-mappings'\nconst access_token = '504afd90-3228-4df9-9d88-9b4d70646101'\n\n/**\n * The Polygon team manually maintains the mapping via user submissions at\n * https://mapper.polygon.technology.\n *\n * This provider provides the l1->l2(Polygon) token mappings.\n */\nexport class PolygonMappingProvider implements MappingProvider {\n  async provide(): Promise<PolygonMappedTokenData> {\n    const response = await axios.get(url, {\n      headers: { 'x-access-token': access_token },\n    })\n    const tokens: PolygonMappedTokenData = {}\n\n    for (const token of response.data) {\n      if (token.isPos) {\n        tokens[token.rootToken.toLowerCase()] = token\n      }\n    }\n    return tokens\n  }\n}\n","import { MappingProvider } from './MappingProvider'\nimport { BnbMappedTokenData, GenericMappedTokenData } from '../constants/types'\nimport bnbmappings from '../local_mappings/bnb.json'\n\n// barring a better external source, we use a local source of mappings for bnb\nexport class BnbMappingProvider implements MappingProvider {\n  async provide(): Promise<BnbMappedTokenData> {\n    const tokens = bnbmappings as BnbMappedTokenData\n    return tokens\n  }\n}\n","import { AbiItem } from 'web3-utils'\n\nconst abi: AbiItem[] = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address',\n      },\n      {\n        name: '_value',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address',\n      },\n      {\n        name: '_to',\n        type: 'address',\n      },\n      {\n        name: '_value',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address',\n      },\n      {\n        name: '_value',\n        type: 'uint256',\n      },\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address',\n      },\n      {\n        name: '_spender',\n        type: 'address',\n      },\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n]\n\nexport default abi\n","import { ChainId } from '../constants/chainId'\nimport { Contract } from 'web3-eth-contract'\nimport { ArbitrumMappingProvider } from './ArbitrumMappingProvider'\nimport { OptimismMappingProvider } from './OptimismMappingProvider'\nimport { PolygonMappingProvider } from './PolygonMappingProvider'\nimport { BnbMappingProvider } from './BnbMappingProvider'\nimport { TokenInfo, TokenList } from '@mageswap/token-lists'\nimport { ethers } from 'ethers'\nimport {\n  compareTokenInfos,\n  getRpcUrl,\n  getTokenSymbolFromContract,\n} from '../utils'\nimport ERC20Abi from '../abis/erc20'\n// TODO: use ethers for contract calls (without performance reduction).\nimport Web3 from 'web3'\nimport {\n  GenericMappedTokenData,\n  PolygonMappedTokenData,\n  BnbMappedTokenData,\n  BnbMappedToken,\n} from '../constants/types'\n\nconst web3 = new Web3()\n\n// chains we support fetching mappings for (can be different than the l2ChainIds arg for buildList)\nconst SUPPORTED_L2_CHAINS = [\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.OPTIMISM,\n  ChainId.BNB,\n]\n\nexport async function buildList(\n  l2ChainIds: Array<ChainId>,\n  l1TokenList: TokenList\n): Promise<TokenList> {\n  const multiChainedTokens: TokenInfo[] = []\n  const chainIdToMappingsMap = await generateTokenMappings(\n    l2ChainIds,\n    l1TokenList\n  )\n  for (const l1Token of l1TokenList.tokens) {\n    if (l1Token.chainId === ChainId.MAINNET) {\n      const chainIdToChildTokenDetailsMap: {\n        [key: number]: {\n          childTokenValid: boolean\n          childTokenAddress: string | undefined\n          decimals?: number\n        }\n      } = {}\n      const l2MappingExtension = {\n        extensions: {\n          bridgeInfo: {},\n        },\n      }\n      // build out the extensions.bridgeInfo data containing mappings for each L2 chain\n      await Promise.all(\n        l2ChainIds.map(async (chainId) => {\n          chainIdToChildTokenDetailsMap[chainId] = await getChildTokenDetails(\n            l1Token,\n            chainId,\n            chainIdToMappingsMap\n          )\n          if (chainIdToChildTokenDetailsMap[chainId].childTokenValid) {\n            l2MappingExtension.extensions.bridgeInfo[chainId] = {\n              tokenAddress:\n                chainIdToChildTokenDetailsMap[chainId].childTokenAddress,\n            }\n          }\n        })\n      )\n\n      // build the TokenInfo objects with bridgeInfo extension\n      l2ChainIds.concat([ChainId.MAINNET]).forEach((chainId) => {\n        if (\n          chainId === ChainId.MAINNET ||\n          chainIdToChildTokenDetailsMap[chainId].childTokenValid\n        ) {\n          const tokenInfo: TokenInfo =\n            chainId === ChainId.MAINNET\n              ? ({\n                  ...l1Token,\n                  extensions:\n                    Object.keys(l2MappingExtension.extensions.bridgeInfo)\n                      .length > 0\n                      ? {\n                          bridgeInfo: l2MappingExtension.extensions.bridgeInfo,\n                        }\n                      : undefined,\n                } as unknown as TokenInfo)\n              : ({\n                  ...l1Token,\n                  decimals:\n                    chainIdToChildTokenDetailsMap[chainId].decimals ??\n                    l1Token.decimals,\n                  chainId: chainId,\n                  address:\n                    chainIdToChildTokenDetailsMap[chainId].childTokenAddress,\n                  extensions: {\n                    bridgeInfo: {\n                      [ChainId.MAINNET]: {\n                        tokenAddress: ethers.utils.getAddress(l1Token.address),\n                      },\n                    },\n                  },\n                } as unknown as TokenInfo)\n\n          multiChainedTokens.push(tokenInfo)\n        }\n      })\n    }\n  }\n\n  // build and return final chainified token list\n  const tokenList = {\n    name: `(ChainIds: ${l2ChainIds}) ${l1TokenList.name}`,\n    timestamp: new Date().toISOString(),\n    version: l1TokenList.version,\n    tokens: multiChainedTokens.sort(compareTokenInfos),\n  }\n\n  return tokenList\n}\n\n// using a symbol lookup contract call to check whether the token exists on the L2\nasync function hasExistingTokenContract(address: string, chainId: ChainId) {\n  web3.setProvider(getRpcUrl(chainId))\n  try {\n    const contract: Contract = new web3.eth.Contract(ERC20Abi, address)\n    await getTokenSymbolFromContract(contract)\n  } catch {\n    return false\n  }\n\n  return true\n}\n\nfunction getMappingProvider(chainId: ChainId, l1TokenList: TokenList) {\n  switch (chainId) {\n    case ChainId.ARBITRUM_ONE:\n      return new ArbitrumMappingProvider(l1TokenList)\n    case ChainId.OPTIMISM:\n      return new OptimismMappingProvider()\n    case ChainId.POLYGON:\n      return new PolygonMappingProvider()\n    case ChainId.BNB:\n      return new BnbMappingProvider()\n    default:\n      throw new Error(`Chain ${chainId} not supported for fetching mappings.`)\n  }\n}\n\nasync function generateTokenMappings(\n  chainIds: ChainId[],\n  l1TokenList: TokenList\n) {\n  const chainIdToMappingsMap: {\n    [key: number]:\n      | PolygonMappedTokenData\n      | GenericMappedTokenData\n      | BnbMappedTokenData\n  } = {}\n\n  for (const chainId of chainIds) {\n    if (SUPPORTED_L2_CHAINS.includes(chainId)) {\n      chainIdToMappingsMap[chainId] = await getMappingProvider(\n        chainId,\n        l1TokenList\n      ).provide()\n    }\n  }\n\n  return chainIdToMappingsMap\n}\n\n// handles both string and object cases for childToken (Polygon mappings return object)\nasync function getChildTokenDetails(\n  l1Token: TokenInfo,\n  chainId: ChainId,\n  chainIdToMappingsMap: {\n    [key: number]:\n      | PolygonMappedTokenData\n      | GenericMappedTokenData\n      | BnbMappedTokenData\n  }\n): Promise<{\n  childTokenValid: boolean\n  childTokenAddress: string | undefined\n  decimals?: number | undefined\n}> {\n  const existingMapping: undefined | string =\n    l1Token?.extensions?.bridgeInfo?.[chainId]?.tokenAddress\n  // use the externally fetched mappings if manual entry doesn't exist for the token/chain mapping\n  // and the given L2 chain is supported for fetching mappings\n  if (SUPPORTED_L2_CHAINS.includes(chainId) && existingMapping === undefined) {\n    const childToken =\n      chainIdToMappingsMap[chainId][l1Token.address.toLowerCase()]\n\n    const childTokenAddress = childToken\n      ? ethers.utils.getAddress(\n          typeof childToken === 'object' ? childToken.childToken : childToken\n        )\n      : undefined\n    const childTokenValid = Boolean(\n      childTokenAddress &&\n        (await hasExistingTokenContract(childTokenAddress, chainId))\n    )\n    const decimals =\n      childToken && chainId === ChainId.BNB\n        ? (childToken as BnbMappedToken).decimals\n        : undefined\n\n    return {\n      childTokenValid: childTokenValid,\n      childTokenAddress: childTokenAddress,\n      decimals: decimals,\n    }\n  }\n  return {\n    childTokenValid: !!existingMapping,\n    childTokenAddress: existingMapping,\n  }\n}\n","import { TokenList } from '@mageswap/token-lists'\n\n/**\n * Verifies that for each token with extensions.bridgeInfo defined, for every\n * chainId there exists a token with that chainId at the root-level of the\n * token list.\n *\n * @returns input TokenList if valid, throws otherwise\n */\nexport function verifyExtensions(tokenList: TokenList) {\n  for (const token of tokenList.tokens) {\n    if (!token.extensions?.bridgeInfo) continue\n\n    // if has extension, make sure that:\n    // 1/ other token has root-level entry\n    // 2/ other root entry has extension pointing to it\n    for (const destChainId of Object.keys(token.extensions.bridgeInfo)) {\n      const destTokens = tokenList.tokens.filter(\n        (t) =>\n          t.chainId === Number(destChainId) &&\n          t.address ===\n            // @ts-expect-error TokenList schema does not allow bridgeInfo objetcs yet\n            token.extensions.bridgeInfo[destChainId].tokenAddress\n      )\n\n      if (destTokens.length > 1) {\n        throw new Error(\n          `TokenList has duplicate root-level tokens for ${token.symbol} ${token.chainId}`\n        )\n      }\n\n      const destToken = destTokens[0]\n\n      if (!destToken) {\n        throw new Error(\n          `TokenList is missing root-level TokenInfo for ${token.symbol} ${token.chainId}`\n        )\n      }\n\n      // ensure destToken has an extension pointing back to this\n      const srcToken: { tokenAddress: string } | undefined =\n        // @ts-expect-error TokenList schema does not allow bridgeInfo objects yet\n        destToken.extensions?.bridgeInfo[token.chainId]\n\n      if (!srcToken) {\n        throw new Error(\n          `TokenList is missing root-level TokenInfo.extensions.bridgeInfo for ${token.symbol} ${token.chainId}`\n        )\n      }\n\n      if (srcToken.tokenAddress !== token.address) {\n        throw new Error(\n          `TokenList has invalid root-level TokenInfo.extensions.bridgeInfo for ${token.symbol} ${token.chainId}. Expected ${token.address} but got ${srcToken.tokenAddress}`\n        )\n      }\n    }\n  }\n\n  return tokenList\n}\n","import { TokenList } from '@mageswap/token-lists'\nimport { cloneDeep, groupBy, merge } from 'lodash'\nimport { ChainId } from './constants/chainId'\nimport { buildList } from './providers'\nimport {\n  compareTokenInfos,\n  getTokenList,\n  TokenListOrFetchableTokenList,\n} from './utils'\nimport { verifyExtensions } from './verify'\n\n/**\n * Adds bridgeInfo to the given token list for Optimism, Polygon and Arbitrum.\n * @param l1TokenListOrPathOrUrl\n * @returns TokenList with l2 bridgeInfo filled\n */\nexport async function chainify(\n  l1TokenListOrPathOrUrl: TokenListOrFetchableTokenList\n): Promise<TokenList> {\n  const l1TokenList = await getTokenList(l1TokenListOrPathOrUrl)\n  const l2Chains = [\n    ChainId.POLYGON,\n    ChainId.ARBITRUM_ONE,\n    ChainId.OPTIMISM,\n    ChainId.CELO,\n    ChainId.BNB,\n  ]\n\n  const chainified = await chainifyTokenList(l2Chains, l1TokenListOrPathOrUrl)\n  return mergeTokenLists(\n    l1TokenList, // providing l1 first to make sure duplicated tokens resolve to this list\n    chainified\n  )\n}\n\n/**\n * Given a network and a TokenList, returns the TokenList with `extensions` filled.\n * @param l2ChainIds layer 2 chainIds to operate on\n * @param l1TokenListOrPathOrUrl either an L1 TokenList object or a path/url to a TokenList\n * @returns L1 TokenList with `extensions` filled for the given network\n */\nexport async function chainifyTokenList(\n  l2ChainIds: Array<ChainId>,\n  l1TokenListOrPathOrUrl: TokenListOrFetchableTokenList\n): Promise<TokenList> {\n  try {\n    const l1TokenList = await getTokenList(l1TokenListOrPathOrUrl)\n    const tokenList = await buildList(l2ChainIds, l1TokenList)\n    return verifyExtensions(tokenList)\n  } catch (e) {\n    throw new Error(`An error occured: ${e}`)\n  }\n}\n\n/** Merges two token lists, resolving conflicts to primary list. */\nexport function mergeTokenLists(\n  primary: TokenList,\n  secondary: TokenList\n): TokenList {\n  primary = cloneDeep(primary)\n  secondary = cloneDeep(secondary)\n\n  const grouped = groupBy(\n    [...secondary.tokens, ...primary.tokens],\n    (t) => `${t.chainId}-${t.address.toLowerCase()}`\n  )\n\n  const merged = Object.values(grouped).map((group) => {\n    if (group.length === 1) {\n      return group[0]\n    }\n\n    const merged = merge(group[0], group[1])\n    if (merged.extensions?.bridgeInfo) {\n      // remove reference to self-chain from merge\n      delete merged.extensions.bridgeInfo[merged.chainId]\n    }\n    return merged\n  })\n\n  return cloneDeep({\n    ...primary,\n    tokens: merged.sort(compareTokenInfos),\n  })\n}\n"],"names":["ChainId","compareTokenInfos","t1","t2","chainId","symbol","toLowerCase","getTokenList","_x","_getTokenList","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee5","l1TokenListOrPathOrUrl","wrap","_callee5$","_context5","prev","next","abrupt","getTokenListObj","stop","getTokenListObjFromUrl","_ref","_callee","url","_callee$","_context","axios","get","sent","data","_x2","getTokenListObjFromLocalPath","_ref2","_callee2","path","_callee2$","_context2","JSON","parse","readFileSync","toString","_x3","_ref3","_callee4","pathOrUrl","tokenList","_callee4$","_context4","_ref4","_callee3","localFileExists","looksLikeUrl","_callee3$","_context3","existsSync","isValidHttpUrl","Error","_x5","isTokenList","_x4","urlString","URL","_","protocol","obj","expectedListKeys","actualListKeys","Set","Object","keys","every","key","has","version","tokens","token","tokenKeys","getRpcUrl","MAINNET","OPTIMISM","OPTIMISTIC_KOVAN","ARBITRUM_ONE","ARBITRUM_RINKEBY","POLYGON","POLYGON_MUMBAI","BNB","getTokenSymbolFromContract","_x6","_getTokenSymbolFromContract","_callee6","tokenContract","_callee6$","_context6","Promise","all","methods","call","config","_process$env$MAINNET_","_process$env","process","env","MAINNET_RPC","networkID","getNetworkConfig","_yield$import","getL1Network","getL2Network","MultiCaller","l2Network","l1Network","arbProvider","ethProvider","l1MultiCaller","l2MultiCaller","partnerChainID","providers","JsonRpcProvider","rpcURL","fromProvider","l1","network","provider","multiCaller","l2","getL2TokenAddressesFromL1","l1TokenAddresses","l1GatewayRouterAddress","iFace","L1GatewayRouter__factory","createInterface","multiCall","map","addr","encoder","encodeFunctionData","decoder","returnData","decodeFunctionResult","targetAddr","ArbitrumMappingProvider","l1TokenList","_proto","prototype","provide","_provide","_yield$getNetworkConf","tokenAddresses","l2AddressesFromL1","address","tokenBridge","l1GatewayRouter","reduce","index","_extends2","_extends","optimismTokenListURL","OptimismMappingProvider","optimismTokens","_iterator","_step","_token$extensions","_createForOfIteratorHelperLoose","done","value","extensions","bridgeInfo","tokenAddress","access_token","PolygonMappingProvider","response","headers","isPos","rootToken","BnbMappingProvider","bnbmappings","abi","constant","inputs","name","outputs","type","payable","stateMutability","anonymous","indexed","web3","Web3","SUPPORTED_L2_CHAINS","buildList","_buildList","l2ChainIds","multiChainedTokens","chainIdToMappingsMap","_loop","generateTokenMappings","l1Token","chainIdToChildTokenDetailsMap","l2MappingExtension","_loop$","getChildTokenDetails","childTokenValid","childTokenAddress","_x10","concat","forEach","_chainIdToChildTokenD","_bridgeInfo","tokenInfo","length","undefined","decimals","ethers","utils","getAddress","push","delegateYield","timestamp","Date","toISOString","sort","hasExistingTokenContract","_hasExistingTokenContract","contract","setProvider","eth","Contract","ERC20Abi","t0","getMappingProvider","_generateTokenMappings","chainIds","_iterator2","_step2","includes","_x7","_x8","_x9","_getChildTokenDetails","_l1Token$extensions","_l1Token$extensions$b","_l1Token$extensions$b2","existingMapping","childToken","Boolean","verifyExtensions","_loop2","_destToken$extensions","destChainId","_Object$keys","_i","destTokens","filter","t","Number","destToken","srcToken","_ret","chainify","_chainify","l2Chains","chainified","CELO","chainifyTokenList","mergeTokenLists","_chainifyTokenList","primary","secondary","cloneDeep","grouped","groupBy","merged","values","group","_merged$extensions","merge"],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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"}